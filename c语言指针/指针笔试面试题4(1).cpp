#include<stdio.h>
int main()
{
	int a[5][5];
	int (*p)[4];
	
	p = a;               //报错了，不报错才怪  左边的类型是int (*)[4]   右边的类型是int (*)[5] 
	
	printf("%p %d\n",&p[4][2] - &a[4][2] , &p[4][2] - &a[4][2]);
/* 1.这里直接给出结果：p[4][2] = a[3][3]   (你会的！当初就是自己做出来的，如果忘了见 c语言专题--数组指针--数组指针6 )（注意下标从0开始！！当初自己就是这里错了）
	2.  &p[4][2] - &a[4][2] = -4   (地址减地址等于元素个数，见c语言零散知识点--指针减指针)
	3. 问题来了，-4用%d打印我知道就是-4，但%p又怎么打印呢？
		解；-4的补码：11111111111111111111111111111100
			由于打印%p，所以把 11111111111111111111111111111100直接当作地址看待
			转化为十六进制即为答案 ，即0xfffffffc 
*/
	
	return 0;
}

//  p[4][2]怎么算？见 c语言专题--数组指针--数组指针6 

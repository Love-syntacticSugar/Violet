#include<stdio.h>
int main()
{
	int arr[5];				//arr是一个5个元素的数组 
	
	
	int* parr[10];			//parr1是一个数组，数组有10个元素，每个元素的类型是int*             【指针数组】 
	
	
	int (*parr2)[10];		//parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素的类型是int     【数组指针1】 
	
	
	int* (*parr22)[10];     //parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素的类型是int*     【数组指针2】
	 
	
	int (*parr3[10])[5];	//parr3是一个数组(因为先与[]结合)，该数组有10个元素，每个元素都是一个指针(因为再与*结合) {这里是难点}       【数组指针数组1 】 【1】 
							//每一个指针指向一个含有有5个元素的数组(因为再与[]结合)，数组中每个元素的类型是int(因为最后与int结合)  
							//理解的时候把parr3[10]看成p带进去，就像数学的化归思想（可以方便迅速做出判断） 
							
							
	int* (*parr33[10])[5];	//parr3是一个数组(因为先与[]结合)，该数组有10个元素，每个元素都是一个指针(因为再与*结合)       【数组指针数组2 】 
							//每一个指针指向一个含有有5个元素的数组(因为再与[]结合)
							//然后再与*结合,说明数组里的元素是指针，最后与int结合，说明明指针指向的内容是整型数据。（即数组的元素是int*类型 ）					
							
											
	int (*parr4[4])(int);   //parr4是一个数组(因为先与[]结合)，该数组有4个元素，每个元素是一个指针(因为再与*结合)，    【函数指针数组1】 【2】
							//然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型int 
							
							
	int* (*parr44[4])(int);  	//parr4是一个数组(因为先与[]结合)，该数组有4个元素，每个元素是一个指针(因为再与*结合)，    【函数指针数组2】 
							//然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,
							//然后再与最外层的*结合,说明返回值是一个指针，最后再与最外层的int 结合,说明指针指向的内容是整型数据。即函数返回值为int*				
	
	int (*parr5(int))[3];   //从parr5开始,先与()结合,说明parr5是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,  【数组指针函数1】【3】
							//然后再与外面的*结合,说明函数返回的是一个指针（这句话是重点，特别是‘返回’二字，是key，要背） 
							//然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与int 结合,说明数组的内容是整型数据.
							//所以P 是一个参数为一个整数据且返回 一个指向由整型变量组成的数组 的指针变量 的函数
							
	
	int *(*parr55(int))[3];   //从parr5开始,先与()结合,说明parr5是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,  【数组指针函数2】
							//然后再与外面的*结合,说明函数返回的是一个指针 
							//然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.
							//所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数
	
	int (*parr6(int))(int); //函数parr6的返回值是一个指针，该指针指向一个函数，且该函数的返回值是int类型                   【函数指针函数1】 【4】
	
	
	int *(*parr66(int))(int); //函数parr6的返回值是一个指针，该指针指向一个函数，且该函数的返回值是int*类型                【函数指针函数2】 
	
	
	int (*(*pp7)[4])(int);   //pp7是一个指针，指向一个数组，该数组有4个元素，每个元素都是一个指针，每个指针指向一个函数，且该函数的返回值是int类型    【指向函数指针数组的指针1】 
								//指针进阶4有对应例题 
	
	int* (*(*pp77)[4])(int); //pp7是一个指针，指向一个数组，该数组有4个元素，每个元素都是一个指针，每个指针指向一个函数，且该函数的返回值是int*类型    【指向函数指针数组的指针2】 
	
	
	int (*(*pp8)[4])[3];            //同理 
	int* (*(*pp88)[4])[3];	       	//同理 
	
	int (*(*pp9)(int))[3];	    	//同理   
	int* (*(*pp99)(int))[3];     	//同理 
	 
	int (*(*pp10)(int))(int);    	//同理 
	int* (*(*pp1010)(int))(int);    //同理 
	
	//c陷阱和缺陷1
	 (*(void(*)())0)();    //分析: 先转化为 (* (void(*)())0  )();        
							// void(*)()代表函数指针 ,外面的括号加0表示把0强制类型转换为函数指针类型----0就是一个函数的地址 
							//这时候再把 (void(*)())0看作p带进去,不就是 (*p)();就是解引用函数指针嘛,也就是调用0地址处的函数
							
	 //c陷阱和缺陷2
	 void(*signal(int,void(*)(int)))(int);   //分析:先转化为  void(*   signal(int,void(*)(int))   )(int);
	 										//signal(int,void(*)(int))的返回值为一个函数指针(这里很绕!!)
											 //一般都会告诉你 int p() 或者char p(),它们的返回类型很容易确定,但这里 signal(int,void(*)(int))的返回类型是什么呢?
											 //这样看:void(*)(int)   signal(int,void(*)(int)) ,返回类型就是void(*)(int),只不过移进去了而已
											 //就像void(*p)(int) ,其实可以看作void(*)(int) p一样 
}



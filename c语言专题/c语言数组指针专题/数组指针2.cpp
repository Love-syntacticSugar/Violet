/*大牛总结：
下面总结一下数组的数组名(数组中储存的也是数组)的问题:
声明了一个数组TYPE array[n]，则数组名称array 就有了两重含义：

第一，它代表整个数组，它的类型是TYPE[n]；                      ！！！巨重要！！！ 


第二，它是一个常量指针，该指针的类型是TYPE*，该指针指向的类型是TYPE，也就是数组单元的类型，该指针指向的内存区就是数组第0 号单元，该指针自己占有单独的内存区，注意它和数组第0 号单元占据的内存区是不同的。
该指针的值是不能修改的，即类似array++的表达式是错误的。在不同的表达式中数组名array 可以扮演不同的角色。在表达式sizeof(array)中，数组名array 代表数组本身，故这时sizeof 函数测出的是整个数组的大小。
在表达式*array 中，array 扮演的是指针，因此这个表达式的结果就是数组第0 号单元的值。sizeof(*array)测出的是数组单元的大小。
表达式array+n（其中n=0，1，2，.....）中，array 扮演的是指针，故array+n 的结果是一个指针，它的类型是TYPE *，它指向的类型是TYPE，它指向数组第n号单元。故sizeof(array+n)测出的是指针类型的大小，在32 位程序中结果是4 
*/

#include <stdio.h>
int main()
{
	int array[10];
	int (*ptr)[10];
	ptr = &array;	    //很明显ptr代表一整个数组，如果我们用 ptr = array，很明显不妥当，因为array代表第一个元素的地址
	return 0; 
}						//这时候 数组的第一重含义（上面大牛解释） 就来作用了，把array看作这个数组的代表，这时候把这一整个代表存储进 地址&array之中 

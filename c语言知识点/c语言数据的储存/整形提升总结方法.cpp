#include<stdio.h>
int main()
{
	char c = -1;
	
	printf("%d\n",c);

	return 0;
}

/*计算步骤（OW总结）
	1.写出原码反码补码
	2.根据定义的类型（char、int）存入
	3.取出
	4.将取出值根据定义的类型进行整形提升        注意了！太容易错了！！整形提升看的是你定义的变量的类型，而不是你要打印的类型（不理解？见 数据的储存--原码反码补码 3）
	5.观察你所需要打印的类型（%d、%u） 
	6.求出对应原码                  （如果要你打印%u，整形提升之后的补码直接就原反补相等了，虽然你整形提升的时候看的是char类型，但是整形提升之后又要看你需要打印的类型了）
	7.转化为十进制数字

以此题为例：1.原码：100000000000000001
			  反码：111111111111111110
			  补码：111111111111111111
			2.由于是char类型，所以截取8位存入
			3.取出这8位
			4.整形提升： 111111111111111111 
			5.观察到需要打印%d   
			6.求出原码为：100000000000000001    
			7.转化为10进制数字为-1

看似第四步没什么用，但当时就是因为它自己不懂的，这就是逻辑。

补充：若int a = -1;int b = 2;
		试求 c = a + b的值？
		做法：也是上述步骤，只不过第四步之后把补码相加得到c的补码
*/ 

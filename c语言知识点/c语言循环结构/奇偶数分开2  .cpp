
#include<stdio.h>


void swap_(int* p,int sz);
void swap_(int* p,int sz)
{
	int arr[20] = {0};                //!!!!!!!!!!!!!!!!!!!!!!!!!!这一步真的搞死我了！！！！当时定义的 int arr[] = {0}; 死活找不到错在哪里，真没想到出错在这里！ 
									  // 为什么呢？调试的时候就在想a[] = {0}这个数组是怎么样分配内存空间的呢？
									//最后一想，不就是分配了4个字节嘛！a[]只是一个幌子，分配了多少空间要看你后面定义了多少整形变量！！
									//这样一来你后面的赋值全部都是越界访问！！
									//为什么之前 for循环里面 i的值会直接从 9跳到12呢？我估计是因为arr[]的值意外改变了i地址里的值，为什么这么巧就改变了呢？
									//这里我猜了一下，也是因为之前偶然发现的，在同一个程序里定义好几个变量时，它们的地址是挨的很近的，所以越界访问的arr[]可能就和i的地址重叠了 
	int n = 0;
	int m = 0;
	
	for(int i = 0;i < sz;i++)
	{
		if(p[i] % 2 == 0)         //判断原数组元素是否为偶数 
		{
			arr[n] = p[i];       //把偶数暂时存放进arr[]内 
			n++;
		}
		else
		{
			p[m] = p[i];		//把奇数放进原数组前面
			m++;
		}
	}	

	for( int k = 0;k < n;k++)      //把arr[]里面的偶数取出来放进原数组 
	{
		p[m+k] = arr[k];	
	}
}

int main()
{
	int a[] = {1,2,3,4,5,6,7,8,9,10,12,14};
	int sz = 0;
	
	sz = sizeof(a) / sizeof(a[0]);
	
	swap_(a,sz);
	
	for(int j = 0;j<sz;j++)
	{
		printf("%d ",a[j]);
	}
	
	return 0;
}
